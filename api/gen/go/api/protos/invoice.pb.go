// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/protos/invoice.proto

package apipb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Month int32

const (
	MONTH_INVALID   Month = 0
	MONTH_JANUARY   Month = 1
	MONTH_FEBRUARY  Month = 2
	MONTH_MARCH     Month = 3
	MONTH_APRIL     Month = 4
	MONTH_MAY       Month = 5
	MONTH_JUNE      Month = 6
	MONTH_JULY      Month = 7
	MONTH_AUGUST    Month = 8
	MONTH_SEPTEMBER Month = 9
	MONTH_OCTOBER   Month = 10
	MONTH_NOVEMBER  Month = 11
	MONTH_DECEMBER  Month = 12
)

var Month_name = map[int32]string{
	0:  "MONTH_INVALID",
	1:  "MONTH_JANUARY",
	2:  "MONTH_FEBRUARY",
	3:  "MONTH_MARCH",
	4:  "MONTH_APRIL",
	5:  "MONTH_MAY",
	6:  "MONTH_JUNE",
	7:  "MONTH_JULY",
	8:  "MONTH_AUGUST",
	9:  "MONTH_SEPTEMBER",
	10: "MONTH_OCTOBER",
	11: "MONTH_NOVEMBER",
	12: "MONTH_DECEMBER",
}

var Month_value = map[string]int32{
	"MONTH_INVALID":   0,
	"MONTH_JANUARY":   1,
	"MONTH_FEBRUARY":  2,
	"MONTH_MARCH":     3,
	"MONTH_APRIL":     4,
	"MONTH_MAY":       5,
	"MONTH_JUNE":      6,
	"MONTH_JULY":      7,
	"MONTH_AUGUST":    8,
	"MONTH_SEPTEMBER": 9,
	"MONTH_OCTOBER":   10,
	"MONTH_NOVEMBER":  11,
	"MONTH_DECEMBER":  12,
}

func (Month) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_85495120a86b9018, []int{0}
}

type Date struct {
	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *Date) Reset()      { *m = Date{} }
func (*Date) ProtoMessage() {}
func (*Date) Descriptor() ([]byte, []int) {
	return fileDescriptor_85495120a86b9018, []int{0}
}
func (m *Date) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Date) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Date.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Date) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Date.Merge(m, src)
}
func (m *Date) XXX_Size() int {
	return m.Size()
}
func (m *Date) XXX_DiscardUnknown() {
	xxx_messageInfo_Date.DiscardUnknown(m)
}

var xxx_messageInfo_Date proto.InternalMessageInfo

func (m *Date) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Date) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *Date) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

type Invoice struct {
	Total          float64 `protobuf:"fixed64,1,opt,name=total,proto3" json:"total,omitempty"`
	Status         string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	DateFrom       *Date   `protobuf:"bytes,3,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	DateTo         *Date   `protobuf:"bytes,4,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
	Month          Month   `protobuf:"varint,5,opt,name=month,proto3,enum=cfe_clone.api.Month" json:"month,omitempty"`
	ExpirationDate *Date   `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Year           int32   `protobuf:"varint,7,opt,name=year,proto3" json:"year,omitempty"`
}

func (m *Invoice) Reset()      { *m = Invoice{} }
func (*Invoice) ProtoMessage() {}
func (*Invoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_85495120a86b9018, []int{1}
}
func (m *Invoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice.Merge(m, src)
}
func (m *Invoice) XXX_Size() int {
	return m.Size()
}
func (m *Invoice) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice proto.InternalMessageInfo

func (m *Invoice) GetTotal() float64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Invoice) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Invoice) GetDateFrom() *Date {
	if m != nil {
		return m.DateFrom
	}
	return nil
}

func (m *Invoice) GetDateTo() *Date {
	if m != nil {
		return m.DateTo
	}
	return nil
}

func (m *Invoice) GetMonth() Month {
	if m != nil {
		return m.Month
	}
	return MONTH_INVALID
}

func (m *Invoice) GetExpirationDate() *Date {
	if m != nil {
		return m.ExpirationDate
	}
	return nil
}

func (m *Invoice) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

type ListInvoicesRequest struct {
	ServiceNumber string `protobuf:"bytes,1,opt,name=service_number,json=serviceNumber,proto3" json:"service_number,omitempty"`
}

func (m *ListInvoicesRequest) Reset()      { *m = ListInvoicesRequest{} }
func (*ListInvoicesRequest) ProtoMessage() {}
func (*ListInvoicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85495120a86b9018, []int{2}
}
func (m *ListInvoicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInvoicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInvoicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInvoicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInvoicesRequest.Merge(m, src)
}
func (m *ListInvoicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListInvoicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInvoicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListInvoicesRequest proto.InternalMessageInfo

func (m *ListInvoicesRequest) GetServiceNumber() string {
	if m != nil {
		return m.ServiceNumber
	}
	return ""
}

type ListInvoicesResponse struct {
	Invoices []*Invoice `protobuf:"bytes,1,rep,name=invoices,proto3" json:"invoices,omitempty"`
}

func (m *ListInvoicesResponse) Reset()      { *m = ListInvoicesResponse{} }
func (*ListInvoicesResponse) ProtoMessage() {}
func (*ListInvoicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85495120a86b9018, []int{3}
}
func (m *ListInvoicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInvoicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInvoicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInvoicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInvoicesResponse.Merge(m, src)
}
func (m *ListInvoicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListInvoicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInvoicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListInvoicesResponse proto.InternalMessageInfo

func (m *ListInvoicesResponse) GetInvoices() []*Invoice {
	if m != nil {
		return m.Invoices
	}
	return nil
}

func init() {
	proto.RegisterEnum("cfe_clone.api.Month", Month_name, Month_value)
	proto.RegisterType((*Date)(nil), "cfe_clone.api.Date")
	proto.RegisterType((*Invoice)(nil), "cfe_clone.api.Invoice")
	proto.RegisterType((*ListInvoicesRequest)(nil), "cfe_clone.api.ListInvoicesRequest")
	proto.RegisterType((*ListInvoicesResponse)(nil), "cfe_clone.api.ListInvoicesResponse")
}

func init() { proto.RegisterFile("api/protos/invoice.proto", fileDescriptor_85495120a86b9018) }

var fileDescriptor_85495120a86b9018 = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4d, 0x4f, 0xdb, 0x4c,
	0x10, 0xc7, 0xbd, 0x79, 0x25, 0x93, 0x17, 0xcc, 0x82, 0x90, 0xc5, 0xf3, 0x68, 0x85, 0x52, 0x55,
	0x42, 0xa8, 0x4a, 0xaa, 0xf4, 0xca, 0x25, 0x81, 0x50, 0x82, 0xf2, 0xa6, 0x25, 0x41, 0xa2, 0x87,
	0x46, 0x4e, 0x58, 0xa8, 0x2b, 0xe2, 0x75, 0xb3, 0x1b, 0x54, 0xa4, 0x1e, 0xaa, 0x7e, 0x82, 0x4a,
	0x55, 0xbf, 0x43, 0x3f, 0x4a, 0x8f, 0x48, 0xbd, 0x70, 0x2c, 0xa6, 0x87, 0x1e, 0x39, 0xf4, 0x03,
	0x54, 0xde, 0x75, 0x6a, 0x82, 0x4a, 0x6f, 0x9e, 0xdf, 0xfe, 0x67, 0x76, 0xe6, 0xbf, 0x1e, 0xb0,
	0x6c, 0xcf, 0x29, 0x7b, 0x13, 0x2e, 0xb9, 0x28, 0x3b, 0xee, 0x39, 0x77, 0x46, 0xac, 0xa4, 0x42,
	0x9c, 0x1f, 0x9d, 0xb0, 0xc1, 0xe8, 0x8c, 0xbb, 0xac, 0x64, 0x7b, 0xce, 0xda, 0xff, 0xa7, 0x9c,
	0x9f, 0x9e, 0xb1, 0x72, 0xa0, 0xb7, 0x5d, 0x97, 0x4b, 0x5b, 0x3a, 0xdc, 0x15, 0x5a, 0xbc, 0xf6,
	0x5f, 0x78, 0xaa, 0xa2, 0xe1, 0xf4, 0xa4, 0xcc, 0xc6, 0x9e, 0xbc, 0xd0, 0x87, 0xc5, 0x1a, 0x24,
	0x76, 0x6c, 0xc9, 0x30, 0x86, 0xc4, 0x05, 0xb3, 0x27, 0x16, 0x5a, 0x47, 0x1b, 0x49, 0xaa, 0xbe,
	0xf1, 0x0a, 0x24, 0xc7, 0xdc, 0x95, 0xaf, 0xac, 0x98, 0x82, 0x3a, 0xc0, 0x26, 0xc4, 0x8f, 0xed,
	0x0b, 0x2b, 0xae, 0x58, 0xf0, 0x59, 0xfc, 0x1c, 0x83, 0x74, 0x43, 0xf7, 0x17, 0xe4, 0x48, 0x2e,
	0xed, 0x33, 0x55, 0x08, 0x51, 0x1d, 0xe0, 0x55, 0x48, 0x09, 0x69, 0xcb, 0xa9, 0x50, 0xa5, 0x32,
	0x34, 0x8c, 0xf0, 0x53, 0xc8, 0x1c, 0xdb, 0x92, 0x0d, 0x4e, 0x26, 0x7c, 0xac, 0x2a, 0x66, 0x2b,
	0xcb, 0xa5, 0xb9, 0xd9, 0x4a, 0x41, 0x77, 0x74, 0x21, 0x50, 0xed, 0x4e, 0xf8, 0x18, 0x3f, 0x81,
	0xb4, 0xca, 0x90, 0xdc, 0x4a, 0x3c, 0xac, 0x4f, 0x05, 0x9a, 0x1e, 0xc7, 0x9b, 0xb3, 0x09, 0x92,
	0xeb, 0x68, 0xa3, 0x50, 0x59, 0xb9, 0xa7, 0x6d, 0x05, 0x67, 0xb3, 0xb9, 0xb6, 0x60, 0x91, 0xbd,
	0xf5, 0x9c, 0x89, 0xf2, 0x6e, 0x10, 0x14, 0xb0, 0x52, 0x0f, 0xdf, 0x50, 0x88, 0xb4, 0x73, 0xfe,
	0xa5, 0x23, 0xff, 0x8a, 0x5b, 0xb0, 0xdc, 0x74, 0x84, 0x0c, 0xad, 0x11, 0x94, 0xbd, 0x99, 0x32,
	0x21, 0xf1, 0x63, 0x28, 0x08, 0x36, 0x39, 0x77, 0x46, 0x6c, 0xe0, 0x4e, 0xc7, 0x43, 0xa6, 0x4d,
	0xcf, 0xd0, 0x7c, 0x48, 0xdb, 0x0a, 0x16, 0xf7, 0x61, 0x65, 0x3e, 0x5b, 0x78, 0xdc, 0x15, 0x0c,
	0x57, 0x60, 0x21, 0xfc, 0x19, 0x84, 0x85, 0xd6, 0xe3, 0x1b, 0xd9, 0xca, 0xea, 0xbd, 0x06, 0xc3,
	0x14, 0xfa, 0x47, 0xb7, 0xf9, 0x0b, 0x41, 0x52, 0x0d, 0x8b, 0x97, 0x20, 0xdf, 0xea, 0xb4, 0x7b,
	0x7b, 0x83, 0x46, 0xfb, 0xb0, 0xda, 0x6c, 0xec, 0x98, 0x46, 0x84, 0xf6, 0xab, 0xed, 0x7e, 0x95,
	0x1e, 0x99, 0x08, 0x63, 0x28, 0x68, 0xb4, 0x5b, 0xaf, 0x51, 0xc5, 0x62, 0x78, 0x11, 0xb2, 0x9a,
	0xb5, 0xaa, 0x74, 0x7b, 0xcf, 0x8c, 0x47, 0xa0, 0xda, 0xa5, 0x8d, 0xa6, 0x99, 0xc0, 0x79, 0xc8,
	0xcc, 0x14, 0x47, 0x66, 0x12, 0x17, 0x00, 0xc2, 0xba, 0xfd, 0x76, 0xdd, 0x4c, 0xdd, 0x8d, 0x9b,
	0x47, 0x66, 0x1a, 0x9b, 0x90, 0x0b, 0xf3, 0xfb, 0xcf, 0xfb, 0x07, 0x3d, 0x73, 0x01, 0x2f, 0xc3,
	0xa2, 0x26, 0x07, 0xf5, 0x6e, 0xaf, 0xde, 0xaa, 0xd5, 0xa9, 0x99, 0x89, 0xda, 0xeb, 0x6c, 0xf7,
	0x3a, 0x01, 0x82, 0xa8, 0xbd, 0x76, 0xe7, 0x50, 0xcb, 0xb2, 0x11, 0xdb, 0xa9, 0x6f, 0x6b, 0x96,
	0xab, 0xbc, 0x83, 0x42, 0xe8, 0xc5, 0x81, 0xb6, 0x16, 0xbf, 0x86, 0xdc, 0x5d, 0x53, 0x71, 0xf1,
	0x9e, 0x75, 0x7f, 0x79, 0xaf, 0xb5, 0x47, 0xff, 0xd4, 0xe8, 0x57, 0x29, 0x2e, 0x7d, 0xf8, 0xf6,
	0xe3, 0x53, 0x2c, 0x8b, 0x33, 0xb3, 0x4d, 0x15, 0xb5, 0x97, 0x97, 0xd7, 0xc4, 0xb8, 0xba, 0x26,
	0xc6, 0xed, 0x35, 0x41, 0xef, 0x7d, 0x82, 0xbe, 0xf8, 0x04, 0x7d, 0xf5, 0x09, 0xba, 0xf4, 0x09,
	0xfa, 0xee, 0x13, 0xf4, 0xd3, 0x27, 0xc6, 0xad, 0x4f, 0xd0, 0xc7, 0x1b, 0x62, 0x5c, 0xde, 0x10,
	0xe3, 0xea, 0x86, 0x18, 0xb0, 0x34, 0xe2, 0xe3, 0xf9, 0x0b, 0x6b, 0xb9, 0xf0, 0xb6, 0x6e, 0xb0,
	0xb1, 0x5d, 0xf4, 0x22, 0x69, 0x7b, 0x8e, 0x37, 0x1c, 0xa6, 0xd4, 0x06, 0x3f, 0xfb, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x71, 0x56, 0x4a, 0xc6, 0x27, 0x04, 0x00, 0x00,
}

func (x Month) String() string {
	s, ok := Month_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Date) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Date)
	if !ok {
		that2, ok := that.(Date)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	return true
}
func (this *Invoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Invoice)
	if !ok {
		that2, ok := that.(Invoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.DateFrom.Equal(that1.DateFrom) {
		return false
	}
	if !this.DateTo.Equal(that1.DateTo) {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	if !this.ExpirationDate.Equal(that1.ExpirationDate) {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	return true
}
func (this *ListInvoicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListInvoicesRequest)
	if !ok {
		that2, ok := that.(ListInvoicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceNumber != that1.ServiceNumber {
		return false
	}
	return true
}
func (this *ListInvoicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListInvoicesResponse)
	if !ok {
		that2, ok := that.(ListInvoicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Invoices) != len(that1.Invoices) {
		return false
	}
	for i := range this.Invoices {
		if !this.Invoices[i].Equal(that1.Invoices[i]) {
			return false
		}
	}
	return true
}
func (this *Date) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&apipb.Date{")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Invoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&apipb.Invoice{")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.DateFrom != nil {
		s = append(s, "DateFrom: "+fmt.Sprintf("%#v", this.DateFrom)+",\n")
	}
	if this.DateTo != nil {
		s = append(s, "DateTo: "+fmt.Sprintf("%#v", this.DateTo)+",\n")
	}
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	if this.ExpirationDate != nil {
		s = append(s, "ExpirationDate: "+fmt.Sprintf("%#v", this.ExpirationDate)+",\n")
	}
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListInvoicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apipb.ListInvoicesRequest{")
	s = append(s, "ServiceNumber: "+fmt.Sprintf("%#v", this.ServiceNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListInvoicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apipb.ListInvoicesResponse{")
	if this.Invoices != nil {
		s = append(s, "Invoices: "+fmt.Sprintf("%#v", this.Invoices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInvoice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
}

type invoiceServiceClient struct {
	cc *grpc.ClientConn
}

func NewInvoiceServiceClient(cc *grpc.ClientConn) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, "/cfe_clone.api.InvoiceService/ListInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
type InvoiceServiceServer interface {
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
}

func RegisterInvoiceServiceServer(s *grpc.Server, srv InvoiceServiceServer) {
	s.RegisterService(&_InvoiceService_serviceDesc, srv)
}

func _InvoiceService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cfe_clone.api.InvoiceService/ListInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InvoiceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cfe_clone.api.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInvoices",
			Handler:    _InvoiceService_ListInvoices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/invoice.proto",
}

func (m *Date) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Date) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Year != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Year))
	}
	if m.Month != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Month))
	}
	if m.Day != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Day))
	}
	return i, nil
}

func (m *Invoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Total))))
		i += 8
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.DateFrom != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.DateFrom.Size()))
		n1, err1 := m.DateFrom.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.DateTo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.DateTo.Size()))
		n2, err2 := m.DateTo.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.Month != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Month))
	}
	if m.ExpirationDate != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.ExpirationDate.Size()))
		n3, err3 := m.ExpirationDate.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.Year != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(m.Year))
	}
	return i, nil
}

func (m *ListInvoicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInvoicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.ServiceNumber)))
		i += copy(dAtA[i:], m.ServiceNumber)
	}
	return i, nil
}

func (m *ListInvoicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInvoicesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Invoices) > 0 {
		for _, msg := range m.Invoices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInvoice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintInvoice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Date) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Year != 0 {
		n += 1 + sovInvoice(uint64(m.Year))
	}
	if m.Month != 0 {
		n += 1 + sovInvoice(uint64(m.Month))
	}
	if m.Day != 0 {
		n += 1 + sovInvoice(uint64(m.Day))
	}
	return n
}

func (m *Invoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 9
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.DateFrom != nil {
		l = m.DateFrom.Size()
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.DateTo != nil {
		l = m.DateTo.Size()
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.Month != 0 {
		n += 1 + sovInvoice(uint64(m.Month))
	}
	if m.ExpirationDate != nil {
		l = m.ExpirationDate.Size()
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.Year != 0 {
		n += 1 + sovInvoice(uint64(m.Year))
	}
	return n
}

func (m *ListInvoicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceNumber)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	return n
}

func (m *ListInvoicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Invoices) > 0 {
		for _, e := range m.Invoices {
			l = e.Size()
			n += 1 + l + sovInvoice(uint64(l))
		}
	}
	return n
}

func sovInvoice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInvoice(x uint64) (n int) {
	return sovInvoice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Date) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Date{`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Invoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Invoice{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`DateFrom:` + strings.Replace(this.DateFrom.String(), "Date", "Date", 1) + `,`,
		`DateTo:` + strings.Replace(this.DateTo.String(), "Date", "Date", 1) + `,`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`ExpirationDate:` + strings.Replace(this.ExpirationDate.String(), "Date", "Date", 1) + `,`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListInvoicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListInvoicesRequest{`,
		`ServiceNumber:` + fmt.Sprintf("%v", this.ServiceNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListInvoicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInvoices := "[]*Invoice{"
	for _, f := range this.Invoices {
		repeatedStringForInvoices += strings.Replace(f.String(), "Invoice", "Invoice", 1) + ","
	}
	repeatedStringForInvoices += "}"
	s := strings.Join([]string{`&ListInvoicesResponse{`,
		`Invoices:` + repeatedStringForInvoices + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInvoice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Date) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Date: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Date: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Total = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DateFrom == nil {
				m.DateFrom = &Date{}
			}
			if err := m.DateFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DateTo == nil {
				m.DateTo = &Date{}
			}
			if err := m.DateTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= Month(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationDate == nil {
				m.ExpirationDate = &Date{}
			}
			if err := m.ExpirationDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInvoicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInvoicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInvoicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInvoicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInvoicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInvoicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invoices = append(m.Invoices, &Invoice{})
			if err := m.Invoices[len(m.Invoices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInvoice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInvoice
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthInvoice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInvoice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInvoice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthInvoice
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInvoice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInvoice   = fmt.Errorf("proto: integer overflow")
)
